worker_processes  1;

events {
    worker_connections  1024;
}

http {
    lua_package_path '~/lua/?.lua;;';
    lua_shared_dict discovery 1m;
    init_by_lua_block {
        oidc = require "resty.openidc"
    }

    resolver      8.8.8.8;
    include       mime.types;
    default_type  application/octet-stream;
    server {
        log_subrequest on;

        listen      80;
        #listen     443 ssl;
        #ssl_certificate     certificate-chain.crt;
        #ssl_certificate_key private.key;

        location /t {
            echo "hello, world!";
        }

        location /default {
            access_by_lua_block {
              local opts = {
                redirect_uri_path = "/redirect_uri",
                discovery = {
                  authorization_endpoint = "http://localhost/authorize",
                  token_endpoint = "http://localhost/token",
                  token_endpoint_auth_methods_supported = { "client_secret_post" }
                },
                client_id = "client_id",
                client_secret = "client_secret",
                ssl_verify = "no",
                redirect_uri_scheme = 'http',
              }
              local oidc = require "resty.openidc"
              local res, err, target, session = oidc.authenticate(opts)
              if err then
                ngx.status = 500
                ngx.say(err)
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
              end
            }
            rewrite ^/default/(.*)$ /$1  break;
            proxy_pass http://localhost:80;
        }

        location /custom {
            access_by_lua_block {
              local opts = {
                redirect_uri_path = "/redirect_uri",
                discovery = {
                  authorization_endpoint = "http://localhost/authorize",
                  token_endpoint = "http://localhost/token",
                  token_endpoint_auth_methods_supported = { "client_secret_post" }
                },
                client_id = "client_id",
                client_secret = "client_secret",
                ssl_verify = "no",
                redirect_uri_scheme = 'http',
                scope = "my-scope"
              }
              local oidc = require "resty.openidc"
              local res, err, target, session = oidc.authenticate(opts)
              if err then
                ngx.status = 500
                ngx.say(err)
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
              end
            }
            rewrite ^/default/(.*)$ /$1  break;
            proxy_pass http://localhost:80;
        }

    }
}
